'''
SON UNA POTENTE HERRAMIENTA PARA PARA VARIAS CLASES DE MANIPULACION DE CADENAS.

SON UN LENGUAJE ESPECIFICO DE DOMINIO (DSL POR SUS SIGLAS EN INGLES) QUE ESTA PRECDENTE COM UNA BIBLIOTECA EN LA MAYORIA DE LOS LENGUAJES DE PROGRAMACION, NO SOLO EN PYTHON.
SON UTILES PARA TAREAS PRINCIPALES:

-VERIFICAR QUE LAS CADENAS CORRESPONDAN A UN PATRON (POR EJEMPLO QUE UNA CADENA TENGA EL FORMATO DE UN CORREO ELECTRONICO);
-REALIZAR SUSTITUCIONES EN UNA CADENA  (POR EJEMPLO CAMBIAR LA ORTOGRAFIA DEL INGLES ESTADOUNIDENSE AL INGLES BRITANICO).

LOS LENGUAJES ESPECIFICOS DEL DOMINIO SON MINI-LENGUAJES DE PROGRAMACION ALTAMENTE ESPECIALIZADOS.

LAS EXPRESIONES REGULARES SON UN EJEMPLO POPULAR, Y SQL (PARA LA MANIPULACION DE BASE DE DATOS) ES OTRO.

LENGUAJES PRIVADOS ESPECIFICOS DEL DOMINIO SON A MENUDO UTILIZADOS PARA PROPOSITOS INDUSTRIALES PARTICULARES.

PUEDEN SER ACCEDIDAS UTILIZANDO EL MODULO re, EL CUAL ES PARTE DE LA BIBLIOTECA ESTANDAR.

LUEGO DE DEFINIR UNA EXPRESION REGULAR, LA FUNCION re.match PUEDE UTILIZARSE PARA VER SI CORESPONDE AL PRINCIPIO DE UNA CADENA.

SI ENCUENTRA UNA CORRESPONDENCIA, match DEVUELVE UN OBJETO QUE REPRECENTE LA COINCIDENCIA, SI NO, DEVUELVE NONE.

SE RECOMIENDA UTILIZAR CADENAS PURAS PARA EVITAR CONFUCIONES TAL COMO r"expresion"

LAS CADENAS PURAS NO ESCAPAN NADA, LO CUAL HACE MAS FACIL EL USO DE EXPRESIONES REGULARES.
'''


import re 
pattern = r"spam"

if re.match(pattern, "spamspamspam"):
    print("match")

else:
    print("no match")

#El ejemplo anterior chequea si el patron "spam" corresponde a la cadena e imprime match si lo hace.
#aqui el patron es sencillo pero hay varios caracteres que tienen un significado especial cuando son utilizadas en una expresion regular.

'''
OTRAS FUNCIONES PARA CORRESPONDER PATRONES SON re.search Y re.findall.

search: ENCUENTRA UNA CORRESPONDENCIA DE UN PATRON EN CUALQUIER CADENA.
findall: DEVUELVE UNA LISTA CON TODAS LAS SUBCADENAS QUE COINCIDEN CON UN PATRON.
'''

mattern = r"spam"

if re.match(mattern, "eggspamsausagespam"):
    print("match")

else:
    print("no match")

if re.search(mattern, "eggspamsausagespam"):
    print("match")

else:
    print("no match")

if re.findall(mattern, "eggspamsausagespam"):
    print("match")

else:
    print("no match")

'''
LA BUSQUEDA regex DEVUELVE UN OBJETO CON VARIOS METODOS QUE DAN DETALLES SOBRE ESTA.
ESTOS METODO INCLUYEN group QUE DEVUELVE LA CADENA QUE COINCIDE, start y end  QUE DEVUELVEN LA POSICION INICIAL Y FINAL DE LA CADENA QUE COINCIDE RESPECTIVAMENTE, Y spam  QUE DEVUELVE LA POSICION
INCICIAL Y FINAL COMO UNA TUPLA.
'''

pattern1 = r"pam"

match = re.search(pattern1, "eddspamsausage")

if match:
    print(match.group())
    print(match.start())
    print(match.end())
    print(match.span())

'''
UNO DE LOS METODOS MAS REGULARES ES sub: REMPLAZA TODAS LAS OCURRENCIAS DE UN pattern CON repl, SUSTITUYENDO TODAS LAS OCURRENCIAS HASTA QUE count SEA PROVISTO. ESTE METODO DEVUELVE UNA CADENA
MODIFICADA.
'''

str = "My name is Giovanny. Hola Giovanny"
pattern2 = r"Giovanny"
newstr = re.sub(pattern2, "Amy", str) #sustituyo giovanny por Amy
print(newstr)